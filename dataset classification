import sys
print('python :{}'.format(sys.version))
import pandas 
print('pandas:{}'.format(pandas.__version__))
import numpy
print('numpy:{}'.format(numpy.__version__))
import sklearn
print('sklearn:{}'.format(sklearn.__version__))
import scipy 
print('scipy:{}'.format(scipy.__version__))

# importing dependencies
import pandas as pd
from pandas.plotting import scatter_matrix
from matplotlib import pyplot
from sklearn.model_selection import train_test_split,cross_val_score,StratifiedKFold
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

# viewing the data
dataset = pd.read_csv('datasets_4247_6570_Iris.csv')
dataset.head(20)

dataset.describe()

# class distribution
print(dataset.groupby('Species').size())

# univariate plots and whisker plots
dataset.plot(kind='box',layout=(4,4),sharex=False,sharey=False,subplots=True)
pyplot.show()

dataset.hist()
pyplot.show()

# multivariate plots 
scatter_matrix(dataset)
pyplot.show


# creating a validation dataset
array = dataset.values
x  = array[:,0:5]
y = array[:,5]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

# available models
models=[]
models.append(('LR',LogisticRegression(solver='liblinear',multi_class='ovr')))
models.append(('LDA',LinearDiscriminantAnalysis()))
models.append(('KNN',KNeighborsClassifier()))
models.append(('NB',GaussianNB()))
models.append(('SVM',SVC(gamma = 'auto')))

# Evaluate the models
results =[]
names =[]
for name,model in models:
    kfold = StratifiedKFold(n_splits = 10)
    cv_results = cross_val_score(model,x,y,cv=kfold,scoring='accuracy')
    results.append(cv_results)
    names.append(name)
    print('%s:%f(%f)'%(name,cv_results.mean(),cv_results.std()))

    
model = LinearDiscriminantAnalysis()
model.fit(x_train,y_train)
predictions = model.predict(x_test)

#evaluate predictions

print(accuracy_score(y_test,predictions))
print(confusion_matrix(y_test,predictions))
print(classification_report(y_test,predictions))
    
